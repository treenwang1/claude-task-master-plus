---
description: Guidelines for implementing task management operations
globs: scripts/modules/task-manager.js
alwaysApply: false
---

# Task Management Guidelines

## Task Structure Standards

- **Core Task Properties**:
  - ✅ DO: Include all required properties in each task object
  - ✅ DO: Provide default values for optional properties
  - ❌ DON'T: Add extra properties that aren't in the standard schema

  ```javascript
  // ✅ DO: Follow this structure for task objects
  const task = {
    id: nextId,
    title: "Task title",
    description: "Brief task description",
    status: "pending", // "pending", "in-progress", "done", etc.
    dependencies: [], // Array of task IDs
    priority: "medium", // "high", "medium", "low"
    details: "Detailed implementation instructions",
    testStrategy: "Verification approach",
    subtasks: [] // Array of subtask objects
  };
  ```

- **Subtask Structure**:
  - ✅ DO: Use consistent properties across subtasks
  - ✅ DO: Maintain simple numeric IDs within parent tasks
  - ❌ DON'T: Duplicate parent task properties in subtasks

  ```javascript
  // ✅ DO: Structure subtasks consistently
  const subtask = {
    id: nextSubtaskId, // Simple numeric ID, unique within the parent task
    title: "Subtask title",
    description: "Brief subtask description",
    status: "pending",
    dependencies: [], // Can include numeric IDs (other subtasks) or full task IDs
    details: "Detailed implementation instructions"
  };
  ```

## Task Creation and Parsing

- **ID Management**:
  - ✅ DO: Assign unique sequential IDs to tasks
  - ✅ DO: Calculate the next ID based on existing tasks
  - ❌ DON'T: Hardcode or reuse IDs

  ```javascript
  // ✅ DO: Calculate the next available ID
  const highestId = Math.max(...data.tasks.map(t => t.id));
  const nextTaskId = highestId + 1;
  ```

- **PRD Parsing**:
  - ✅ DO: Extract tasks from PRD documents using AI
  - ✅ DO: Provide clear prompts to guide AI task generation
  - ✅ DO: Validate and clean up AI-generated tasks

  ```javascript
  // ✅ DO: Validate AI responses
  try {
    // Parse the JSON response
    taskData = JSON.parse(jsonContent);
    
    // Check that we have the required fields
    if (!taskData.title || !taskData.description) {
      throw new Error("Missing required fields in the generated task");
    }
  } catch (error) {
    log('error', "Failed to parse AI's response as valid task JSON:", error);
    process.exit(1);
  }
  ```

## Task Updates and Modifications

- **Status Management**:
  - ✅ DO: Provide functions for updating task status
  - ✅ DO: Handle both individual tasks and subtasks
  - ✅ DO: Consider subtask status when updating parent tasks

  ```javascript
  // ✅ DO: Handle status updates for both tasks and subtasks
  async function setTaskStatus(tasksPath, taskIdInput, newStatus) {
    // Check if it's a subtask (e.g., "1.2")
    if (taskIdInput.includes('.')) {
      const [parentId, subtaskId] = taskIdInput.split('.').map(id => parseInt(id, 10));
      
      // Find the parent task and subtask
      const parentTask = data.tasks.find(t => t.id === parentId);
      const subtask = parentTask.subtasks.find(st => st.id === subtaskId);
      
      // Update subtask status
      subtask.status = newStatus;
      
      // Check if all subtasks are done
      if (newStatus === 'done') {
        const allSubtasksDone = parentTask.subtasks.every(st => st.status === 'done');
        if (allSubtasksDone) {
          // Suggest updating parent task
        }
      }
    } else {
      // Handle regular task
      const task = data.tasks.find(t => t.id === parseInt(taskIdInput, 10));
      task.status = newStatus;
      
      // If marking as done, also mark subtasks
      if (newStatus === 'done' && task.subtasks && task.subtasks.length > 0) {
        task.subtasks.forEach(subtask => {
          subtask.status = newStatus;
        });
      }
    }
  }
  ```

- **Task Expansion**:
  - ✅ DO: Use AI to generate detailed subtasks
  - ✅ DO: Use appropriate subtask counts based on task scope
  - ✅ DO: Ensure proper IDs for newly created subtasks

  ```javascript
  // ✅ DO: Generate appropriate subtasks based on task scope
  if (taskAnalysis) {
    log('info', `Found task analysis for task ${taskId}`);
    
    // Use recommended number of subtasks if available
    if (taskAnalysis.recommendedSubtasks && numSubtasks === CONFIG.defaultSubtasks) {
      numSubtasks = taskAnalysis.recommendedSubtasks;
      log('info', `Using recommended number of subtasks: ${numSubtasks}`);
    }
  }
  ```

## Task File Generation

- **File Formatting**:
  - ✅ DO: Use consistent formatting for task files
  - ✅ DO: Include all task properties in text files
  - ✅ DO: Format dependencies with status indicators

  ```javascript
  // ✅ DO: Use consistent file formatting
  let content = `# Task ID: ${task.id}\n`;
  content += `# Title: ${task.title}\n`;
  content += `# Status: ${task.status || 'pending'}\n`;
  
  // Format dependencies with their status
  if (task.dependencies && task.dependencies.length > 0) {
    content += `# Dependencies: ${formatDependenciesWithStatus(task.dependencies, data.tasks)}\n`;
  } else {
    content += '# Dependencies: None\n';
  }
  ```

- **Subtask Inclusion**:
  - ✅ DO: Include subtasks in parent task files
  - ✅ DO: Use consistent indentation for subtask sections
  - ✅ DO: Display subtask dependencies with proper formatting

  ```javascript
  // ✅ DO: Format subtasks correctly in task files
  if (task.subtasks && task.subtasks.length > 0) {
    content += '\n# Subtasks:\n';
    
    task.subtasks.forEach(subtask => {
      content += `## ${subtask.id}. ${subtask.title} [${subtask.status || 'pending'}]\n`;
      
      // Format subtask dependencies
      if (subtask.dependencies && subtask.dependencies.length > 0) {
        // Format the dependencies
        content += `### Dependencies: ${formattedDeps}\n`;
      } else {
        content += '### Dependencies: None\n';
      }
      
      content += `### Description: ${subtask.description || ''}\n`;
      content += '### Details:\n';
      content += (subtask.details || '').split('\n').map(line => line).join('\n');
      content += '\n\n';
    });
  }
  ```

## Task Listing and Display

- **Filtering and Organization**:
  - ✅ DO: Allow filtering tasks by status
  - ✅ DO: Handle subtask display in lists
  - ✅ DO: Use consistent table formats

  ```javascript
  // ✅ DO: Implement clear filtering and organization
  // Filter tasks by status if specified
  const filteredTasks = statusFilter 
    ? data.tasks.filter(task => 
        task.status && task.status.toLowerCase() === statusFilter.toLowerCase())
    : data.tasks;
  ```

- **Progress Tracking**:
  - ✅ DO: Calculate and display completion statistics
  - ✅ DO: Track both task and subtask completion
  - ✅ DO: Use visual progress indicators

  ```javascript
  // ✅ DO: Track and display progress
  // Calculate completion statistics
  const totalTasks = data.tasks.length;
  const completedTasks = data.tasks.filter(task => 
    task.status === 'done' || task.status === 'completed').length;
  const completionPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
  
  // Count subtasks
  let totalSubtasks = 0;
  let completedSubtasks = 0;
  
  data.tasks.forEach(task => {
    if (task.subtasks && task.subtasks.length > 0) {
      totalSubtasks += task.subtasks.length;
      completedSubtasks += task.subtasks.filter(st => 
        st.status === 'done' || st.status === 'completed').length;
    }
  });
  ```

## Task Expansion

- **Expansion Process**:
  - ✅ DO: Use AI to expand tasks into subtasks
  - ✅ DO: Generate specific expansion recommendations
  - ✅ DO: Consider task scope and requirements

  ```javascript
  // ✅ DO: Handle task expansion properly
  const expandedTask = {
    ...task,
    subtasks: generatedSubtasks,
    lastExpanded: new Date().toISOString()
  };
  ```

## Task Verification System

- **Verification Structure**:
  - ✅ DO: Include verifications array in task objects
  - ✅ DO: Create specific, testable verification criteria
  - ✅ DO: Use factual, observable conditions
  - ❌ DON'T: Create vague or subjective verifications

  ```javascript
  // ✅ DO: Structure verifications properly
  const taskWithVerifications = {
    id: 1,
    title: "Setup API Authentication",
    description: "Implement JWT-based authentication",
    status: "pending",
    verifications: [
      {
        description: "API endpoint /auth/login exists and responds with 200",
        passed: false
      },
      {
        description: "JWT middleware is configured in server.js",
        passed: false
      },
      {
        description: "Token validation function returns true for valid tokens",
        passed: false
      }
    ]
  };
  ```

- **Verification Testing**:
  - ✅ DO: Test each verification systematically
  - ✅ DO: Update passed status based on factual evidence
  - ✅ DO: Use multiple testing methods for comprehensive validation
  - ❌ DON'T: Skip verification testing before task execution

  ```javascript
  // ✅ DO: Implement verification testing
  async function testTaskVerifications(task) {
    const results = [];
    
    for (const verification of task.verifications || []) {
      let passed = false;
      
      // Test based on verification description
      if (verification.description.includes('endpoint')) {
        // Test API endpoint
        passed = await testApiEndpoint(verification.description);
      } else if (verification.description.includes('file exists')) {
        // Test file existence
        passed = await testFileExists(verification.description);
      } else if (verification.description.includes('function')) {
        // Test function behavior
        passed = await testFunctionBehavior(verification.description);
      }
      
      results.push({
        ...verification,
        passed: passed,
        testedAt: new Date().toISOString()
      });
    }
    
    return results;
  }
  ```

- **Verification Decision Logic**:
  - ✅ DO: Only implement tasks when verifications fail
  - ✅ DO: Mark tasks as done when all verifications pass
  - ✅ DO: Focus implementation on failing verifications
  - ❌ DON'T: Implement tasks that are already complete

  ```javascript
  // ✅ DO: Implement verification decision logic
  function shouldImplementTask(task) {
    // If no verifications, proceed with normal implementation
    if (!task.verifications || task.verifications.length === 0) {
      return true;
    }
    
    // Check if any verifications fail
    const failingVerifications = task.verifications.filter(v => !v.passed);
    
    if (failingVerifications.length === 0) {
      // All verifications pass - task is complete
      return false;
    }
    
    // Some verifications fail - implement the task
    return true;
  }
  
  function updateTaskBasedOnVerifications(task, verificationResults) {
    const allPassed = verificationResults.every(v => v.passed);
    
    if (allPassed) {
      // All verifications pass - mark as done
      return {
        ...task,
        status: 'done',
        verifications: verificationResults,
        results: `Task completed. All verifications passed: ${verificationResults.map(v => v.description).join(', ')}`
      };
    } else {
      // Some verifications fail - update status and proceed with implementation
      const failingItems = verificationResults.filter(v => !v.passed);
      return {
        ...task,
        status: 'in-progress',
        verifications: verificationResults,
        results: `Implementation needed for: ${failingItems.map(v => v.description).join(', ')}`
      };
    }
  }
  ```

- **Verification Best Practices**:
  - ✅ DO: Write specific, actionable verification criteria
  - ✅ DO: Include both positive and negative test cases
  - ✅ DO: Use objective, measurable conditions
  - ❌ DON'T: Create verifications that can't be objectively tested

  ```javascript
  // ✅ GOOD: Specific and testable verifications
  const goodVerifications = [
    {
      description: "HTTP server starts on port 3000 without errors",
      passed: false
    },
    {
      description: "Database connection string in config/database.js is valid",
      passed: false
    },
    {
      description: "User registration endpoint returns 201 status for valid input",
      passed: false
    }
  ];
  
  // ❌ BAD: Vague or subjective verifications
  const badVerifications = [
    {
      description: "System works correctly", // Too vague
      passed: false
    },
    {
      description: "Code quality is good", // Subjective
      passed: false
    },
    {
      description: "Users will be happy", // Not testable
      passed: false
    }
  ];
  ```

- **Integration with Task Status**:
  - ✅ DO: Use verification workflow before status changes
  - ✅ DO: Update verification status after implementation
  - ✅ DO: Re-verify after making changes
  - ❌ DON'T: Skip verification when marking tasks as done

  ```javascript
  // ✅ DO: Integrate verification with status updates and automatic progression
  async function setTaskStatus(taskId, newStatus, taskGroup) {
    const task = findTaskById(taskId);
    
    if (newStatus === 'done') {
      // Verify task before marking as done
      const verificationResults = await testTaskVerifications(task);
      const allPassed = verificationResults.every(v => v.passed);
      
      if (!allPassed) {
        throw new Error(`Cannot mark task as done. Failing verifications: ${
          verificationResults.filter(v => !v.passed).map(v => v.description).join(', ')
        }`);
      }
      
      // Update task with verification results
      task.verifications = verificationResults;
      task.results = `Task completed successfully. All verifications passed.`;
    }
    
    // Apply status update
    task.status = newStatus;
    
    // CRITICAL: Apply automatic status progression after task execution
    await applyDefaultFlowProgression(task, taskGroup);
    
    return task;
  }

  
  function getCurrentTaskGroup() {
    const configPath = path.join(process.cwd(), '.taskmaster', 'config.json');
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    return config.global?.workingTaskGroup || 'default';
  }

  
  // ✅ DO: Implement automatic status progression based on defaultFlow
  async function applyDefaultFlowProgression(task, taskGroup) {
    try {
      // get taskGroup or read default
      taskGroup = taskGroup || getCurrentTaskGroup()
      // Read configuration file
      const configPath = path.join(process.cwd(), '.taskmaster', taskGroup, 'config.json');
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      const defaultFlow = config.defaultFlow || [];
      
      // Find current state in defaultFlow
      const currentIndex = defaultFlow.findIndex(flow => 
        (flow.status === task.status || flow.status === '*') &&
        (flow.executor === task.executor || flow.executor === '*')
      );
      
      // Progress to next state if found and not at end
      if (currentIndex >= 0 && currentIndex < defaultFlow.length - 1) {
        const nextFlow = defaultFlow[currentIndex + 1];
        
        // Update to next status/executor (preserve current values if next uses wildcard)
        task.status = nextFlow.status !== '*' ? nextFlow.status : task.status;
        task.executor = nextFlow.executor !== '*' ? nextFlow.executor : task.executor;
        
        console.log(`Auto-progressed task ${task.id}: ${defaultFlow[currentIndex].status} -> ${task.status}`);
      }
    } catch (error) {
      console.warn('Could not apply defaultFlow progression:', error.message);
      // Continue without progression if config cannot be read
    }
  }
  ```

- **Expansion-Based Workflow**:
  - ✅ DO: Use task expansion to break down complex work
  - ✅ DO: Prioritize tasks that need detailed breakdown
  - ✅ DO: Use specific prompts for expansion guidance

  ```javascript
  // ✅ DO: Apply task expansion to workflow
  // Sort tasks by priority and dependency count
  tasksToExpand.sort((a, b) => {
    const priorityA = getPriorityValue(a.priority);
    const priorityB = getPriorityValue(b.priority);
    
    if (priorityA !== priorityB) {
      return priorityB - priorityA; // Higher priority first
    }
    
    return a.id - b.id; // Lower ID first
  });
  ```

## Next Task Selection

- **Eligibility Criteria**:
  - ✅ DO: Consider dependencies when finding next tasks
  - ✅ DO: Prioritize by task priority and dependency count
  - ✅ DO: Skip completed tasks

  ```javascript
  // ✅ DO: Use proper task prioritization logic
  function findNextTask(tasks) {
    // Get all completed task IDs
    const completedTaskIds = new Set(
      tasks
        .filter(t => t.status === 'done' || t.status === 'completed')
        .map(t => t.id)
    );
    
    // Filter for pending tasks whose dependencies are all satisfied
    const eligibleTasks = tasks.filter(task => 
      (task.status === 'pending' || task.status === 'in-progress') && 
      task.dependencies && 
      task.dependencies.every(depId => completedTaskIds.has(depId))
    );
    
    // Sort by priority, dependency count, and ID
    const priorityValues = { 'high': 3, 'medium': 2, 'low': 1 };
    
    const nextTask = eligibleTasks.sort((a, b) => {
      // Priority first
      const priorityA = priorityValues[a.priority || 'medium'] || 2;
      const priorityB = priorityValues[b.priority || 'medium'] || 2;
      
      if (priorityB !== priorityA) {
        return priorityB - priorityA; // Higher priority first
      }
      
      // Dependency count next
      if (a.dependencies.length !== b.dependencies.length) {
        return a.dependencies.length - b.dependencies.length; // Fewer dependencies first
      }
      
      // ID last
      return a.id - b.id; // Lower ID first
    })[0];
    
    return nextTask;
  }
  ```

Refer to [`task-manager.js`](mdc:scripts/modules/task-manager.js) for implementation examples and [`new_features.mdc`](mdc:.cursor/rules/new_features.mdc) for integration guidelines. 
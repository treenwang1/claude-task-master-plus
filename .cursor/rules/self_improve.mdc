
- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Development Anti-Patterns to Avoid:**
  - **Temporary Test Files:**
    - ❌ DON'T: Create temporary JavaScript test files that are immediately deleted
    - ❌ DON'T: Use file creation/deletion for simple validation tasks
    - ✅ DO: Use `node -c filename.js` for syntax validation
    - ✅ DO: Add tests to existing test files in `tests/` directory
    - ✅ DO: Trust logical code review and static analysis
    - **Example Anti-Pattern:**
      ```javascript
      // ❌ DON'T: Create temporary test files
      const testContent = `
        import { z } from 'zod';
        const schema = z.object({...});
        console.log('Schema works!');
      `;
      fs.writeFileSync('temp-test.js', testContent);
      // ... then delete it
      ```
    - **Better Approach:**
      ```bash
      # ✅ DO: Use syntax checking on actual files
      node -c mcp-server/src/tools/expand-task.js
      ```

  - **Validation Strategies:**
    - ✅ DO: Use existing test infrastructure for complex validation
    - ✅ DO: Trust well-structured code changes in established codebases
    - ✅ DO: Perform logical code review instead of creating validation theater
    - ✅ DO: Use the existing CI/CD processes and test suites
    - ❌ DON'T: Over-engineer simple validations with temporary files
    - ❌ DON'T: Create unnecessary file operations for confidence building

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes
Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
